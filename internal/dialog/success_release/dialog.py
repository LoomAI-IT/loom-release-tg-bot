from aiogram import F
from aiogram_dialog import Window, Dialog
from aiogram_dialog.widgets.text import Const, Format, Case, Multi
from aiogram_dialog.widgets.kbd import Button, Column, Row, Select, Group
from sulguk import SULGUK_PARSE_MODE

from internal import interface, model


class SuccessfulReleasesDialog(interface.ISuccessfulReleasesDialog):
    def __init__(
            self,
            tel: interface.ITelemetry,
            successful_releases_service: interface.ISuccessfulReleasesService,
            successful_releases_getter: interface.ISuccessfulReleasesGetter,
    ):
        self.tracer = tel.tracer()
        self.logger = tel.logger()
        self.successful_releases_service = successful_releases_service
        self.successful_releases_getter = successful_releases_getter

    def get_dialog(self) -> Dialog:
        return Dialog(
            self.get_view_successful_releases_window(),
            self.get_select_rollback_version_window(),
            self.get_confirm_rollback_window(),
        )

    def get_view_successful_releases_window(self) -> Window:
        return Window(
            Multi(
                Const("‚úÖ <b>–£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–ª–∏–∑—ã</b><br><br>"),
                Case(
                    {
                        True: Multi(
                            Format("üì¶ <b>{service_name}</b><br>"),
                            Format("üè∑Ô∏è <b>–í–µ—Ä—Å–∏—è:</b> <code>{release_version}</code><br>"),
                            Format("üîÑ <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}<br>"),
                            Format("üë§ <b>–ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä:</b> <code>{initiated_by}</code><br>"),
                            Format("üìÖ <b>–°–æ–∑–¥–∞–Ω:</b> <code>{created_at_formatted}</code><br>"),
                            Format("üöÄ <b>–ó–∞–¥–µ–ø–ª–æ–µ–Ω:</b> <code>{deployed_at_formatted}</code><br>"),
                            Format("üîó <b>GitHub Action:</b> <a href='{github_action_link}'>–û—Ç–∫—Ä—ã—Ç—å</a><br>"),
                        ),
                        False: Multi(
                            Const("üì≠ <b>–ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–ª–∏–∑–æ–≤</b><br><br>"),
                            Const("üí° <i>–£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–ª–∏–∑—ã –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–µ–ø–ª–æ—è</i>"),
                        ),
                    },
                    selector="has_releases"
                ),
                sep="",
            ),

            # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–ª–∏–∑–∞–º
            Row(
                Button(
                    Const("‚¨ÖÔ∏è –ü—Ä–µ–¥"),
                    id="prev_release",
                    on_click=self.successful_releases_service.handle_navigate_release,
                    when="has_prev",
                ),
                Button(
                    Format("üìä {current_index}/{total_count}"),
                    id="counter",
                    on_click=lambda c, b, d: c.answer("üìà –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Ä–µ–ª–∏–∑–∞–º"),
                    when="has_releases",
                ),
                Button(
                    Const("‚û°Ô∏è –°–ª–µ–¥"),
                    id="next_release",
                    on_click=self.successful_releases_service.handle_navigate_release,
                    when="has_next",
                ),
                when="has_releases",
            ),

            Column(
                Button(
                    Const("‚è™ –û—Ç–∫–∞—Ç–∏—Ç—å"),
                    id="rollback_release",
                    on_click=self.successful_releases_service.handle_rollback_click,
                    when="has_rollback",
                ),
                Button(
                    Const("üîÑ –û–±–Ω–æ–≤–∏—Ç—å"),
                    id="refresh",
                    on_click=self.successful_releases_service.handle_refresh,
                    when="has_releases",
                ),
                Button(
                    Const("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"),
                    id="back_to_menu",
                    on_click=self.successful_releases_service.handle_back_to_menu,
                ),
            ),

            state=model.SuccessfulReleasesStates.view_releases,
            getter=self.successful_releases_getter.get_releases_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_select_rollback_version_window(self) -> Window:
        return Window(
            Multi(
                Const("‚è™ <b>–í—ã–±–æ—Ä –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–∫–∞—Ç–∞</b><br><br>"),
                Format("üì¶ <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code><br>"),
                Format("üè∑Ô∏è <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{current_version}</code><br><br>"),
                Const("üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ—Ä—Å–∏—é –¥–ª—è –æ—Ç–∫–∞—Ç–∞:</b><br>"),
                Const("<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–ª–∏–∑–∞</i>"),
                sep="",
            ),

            Group(
                Select(
                    Format("üè∑Ô∏è {item[release_version]} ({item[deployed_at_formatted]})"),
                    id="rollback_version_select",
                    items="available_versions",
                    item_id_getter=lambda item: str(item["id"]),
                    on_click=self.successful_releases_service.handle_version_selected,
                ),
                width=1,
            ),

            Button(
                Const("‚ùå –û—Ç–º–µ–Ω–∞"),
                id="cancel_rollback",
                on_click=lambda c, b, d: d.switch_to(model.SuccessfulReleasesStates.view_releases),
            ),

            state=model.SuccessfulReleasesStates.select_rollback_version,
            getter=self.successful_releases_getter.get_rollback_versions_data,
            parse_mode=SULGUK_PARSE_MODE,
        )

    def get_confirm_rollback_window(self) -> Window:
        return Window(
            Case(
                {
                    True: Multi(
                        Const("‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞</b><br><br>"),
                        Const("‚ùó <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –æ—Ç–∫–∞—Ç–∏—Ç—å —Ä–µ–ª–∏–∑!<br><br>"),
                        Format("üì¶ <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code><br>"),
                        Format("üè∑Ô∏è <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{current_version}</code><br>"),
                        Format("‚è™ <b>–û—Ç–∫–∞—Ç–∏—Ç—å –Ω–∞:</b> <code>{target_version}</code><br>"),
                        Format("üìÖ <b>–î–∞—Ç–∞ –¥–µ–ø–ª–æ—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:</b> <code>{target_deployed_at}</code><br><br>"),
                        Const("‚ö†Ô∏è <i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Ç–∫–∞—Ç—É —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é.</i><br>"),
                        Const("‚ö†Ô∏è <i>–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ—Ç–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º!</i>"),
                        sep="",
                    ),
                    False: Const("")
                },
                selector="has_not_run_rollback"
            ),
            Case(
                {
                    True: Const("–í—ã–ø–æ–ª–Ω—è—é —Ä–µ–ª–∏–∑"),
                    False: Const(""),
                },
                selector="has_run_rollback"
            ),

            Case(
                {
                    True: Multi(
                        Format("üì¶ <b>–°–µ—Ä–≤–∏—Å:</b> <code>{service_name}</code><br>"),
                        Format("üè∑Ô∏è <b>–ü—Ä–æ—à–ª–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{prev_version}</code><br>"),
                        Format("‚è™ <b>–¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è:</b> <code>{current_version}</code><br>"),
                    ),
                    False: Const("")
                },
                selector="has_done_rollback"
            ),

            Row(
                Button(
                    Const("‚úÖ –î–∞, –æ—Ç–∫–∞—Ç–∏—Ç—å"),
                    id="confirm_rollback_yes",
                    on_click=self.successful_releases_service.handle_confirm_rollback,
                    when="has_not_run_rollback"
                ),
                Button(
                    Const("‚ùå –û—Ç–º–µ–Ω–∞"),
                    id="cancel_rollback_confirm",
                    on_click=lambda c, b, d: d.switch_to(model.SuccessfulReleasesStates.view_releases),
                    when="has_not_run_rollback"
                ),
            ),
            Button(
                Const("–ù–∞–∑–∞–¥"),
                id="back_view_releases",
                on_click=lambda c, b, d: d.switch_to(model.SuccessfulReleasesStates.view_releases),
                when="has_done_rollback"
            ),

            state=model.SuccessfulReleasesStates.confirm_rollback,
            getter=self.successful_releases_getter.get_rollback_confirm_data,
            parse_mode=SULGUK_PARSE_MODE,
        )
